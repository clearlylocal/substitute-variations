{"version":3,"sources":["utils/fns.ts","core/expand.ts","App.tsx","utils/qps.ts","index.tsx"],"names":["inputToLines","text","trim","split","map","x","segmentsToLine","segments","join","replace","segmentSplitter","uniq","arr","Set","expand","line","all","reduce","acc","cur","idx","init","fns","val","fn","pipe","arrOfArrs","flatMap","a","expandToSamples","lineSegments","seg","i","out","max","Math","filter","_","length","push","Array","inc","segIdx","flat","qps","Proxy","get","k","raw","URL","window","location","href","searchParams","undefined","JSON","parse","set","v","url","stringify","history","replaceState","document","title","deleteProperty","delete","joinPath","process","App","useState","input","setInput","className","rows","cols","value","onChange","currentTarget","onClick","confirm","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.20492cde.chunk.js","sourcesContent":["export function pipe<A>(a: A): A\nexport function pipe<A, B>(a: A, ab: (a: A) => B): B\nexport function pipe<A, B, C>(a: A, ab: (a: A) => B, bc: (b: B) => C): C\nexport function pipe(init: any, ...fns: any[]) {\n\treturn fns.reduce((val, fn) => fn(val), init)\n}\n\nexport const permute =\n\t<T>(arr: T[]) =>\n\t(arrOfArrs: T[][]) =>\n\t\tarrOfArrs.flatMap((a) => arr.map((x) => [...a, x]))\n","import { pipe, permute } from '../utils/fns'\n\nconst inputToLines = (text: string) =>\n\ttext\n\t\t.trim()\n\t\t.split('\\n')\n\t\t.map((x) => x.trim())\n\nconst segmentsToLine = (segments: string[]) =>\n\tsegments\n\t\t.join('')\n\t\t.replace(/ +/g, ' ')\n\t\t.replace(/ ([.,?!;:])/g, '$1')\n\t\t.trim()\n\nconst segmentSplitter = /\\[([^\\]]+)\\]/\n\nconst uniq = <T>(arr: T[]) => [...new Set(arr)]\n\nconst expand = (line: string) => {\n\tconst split = line.split(segmentSplitter)\n\n\tconst all = split\n\t\t.reduce(\n\t\t\t(acc, cur, idx) => {\n\t\t\t\treturn idx % 2 === 0\n\t\t\t\t\t? acc.map((x) => [...x, cur])\n\t\t\t\t\t: pipe(acc, permute(cur.split('/')))\n\t\t\t},\n\t\t\t[['']],\n\t\t)\n\t\t.map(segmentsToLine)\n\n\treturn uniq(all)\n}\n\nexport const expandToAll = (text: string) =>\n\tinputToLines(text).flatMap((line) => uniq(expand(line)))\n\nexport const expandToSamples = (text: string) => {\n\tconst lineSegments = inputToLines(text).map((line) =>\n\t\tline\n\t\t\t.split(segmentSplitter)\n\t\t\t.map((seg, i) => (i % 2 ? seg.split('/') : seg)),\n\t)\n\n\tconst out = []\n\n\tfor (const line of lineSegments) {\n\t\tconst max = Math.max(\n\t\t\t1, // at least one - if no [alternatives/] in a line\n\t\t\t...line.filter((_, i) => i % 2).map((x) => x.length),\n\t\t)\n\n\t\tout.push(\n\t\t\t[...new Array(max)]\n\t\t\t\t.map((_, i) => i)\n\t\t\t\t.map((inc) =>\n\t\t\t\t\tline.map((seg, segIdx) =>\n\t\t\t\t\t\tsegIdx % 2 ? seg[inc % seg.length] : seg,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.map(\n\t\t\t\t\tsegmentsToLine as (\n\t\t\t\t\t\t...args: any[]\n\t\t\t\t\t) => ReturnType<typeof segmentsToLine>,\n\t\t\t\t),\n\t\t)\n\t}\n\n\treturn uniq(out.flat())\n}\n","import { join } from 'path'\nimport { FC, useState } from 'react'\nimport { expandToSamples, expandToAll } from './core/expand'\nimport { initQps } from './utils/qps'\n\nconst qps = initQps<{\n\tinput: string\n}>()\n\nconst init = `[Turn on/Switch on/Enable/Activate] [the/] driver['s seat/] fan [mode/].\n[Turn/Switch] [the/] driver['s seat/] fan on.`\n\nconst joinPath = (...segments: string[]) =>\n\tjoin(process.env.PUBLIC_URL, ...segments.flat())\n\nexport const App: FC = () => {\n\tconst [input, setInput] = useState(qps.input ?? init)\n\n\treturn (\n\t\t<>\n\t\t\t<nav className='tabs'>\n\t\t\t\t<a href={joinPath('/')}>Debug</a>\n\t\t\t\t<a href={joinPath('/convert')}>Convert</a>\n\t\t\t</nav>\n\t\t\t<main className='container'>\n\t\t\t\t<div>\n\t\t\t\t\t<h2>input</h2>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tclassName='spaced'\n\t\t\t\t\t\trows={5}\n\t\t\t\t\t\tcols={70}\n\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\tonChange={({ currentTarget: { value } }) => {\n\t\t\t\t\t\t\tsetInput(value)\n\t\t\t\t\t\t\tqps.input = value\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='button primary'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\twindow.confirm(\n\t\t\t\t\t\t\t\t\t'Reset input to default example?',\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tsetInput(init)\n\t\t\t\t\t\t\t\tdelete qps.input\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tReset\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<h2>sample variations</h2>\n\t\t\t\t\t<div className='pre-wrap'>\n\t\t\t\t\t\t{expandToSamples(input).join('\\n')}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<h2>all variations</h2>\n\t\t\t\t\t<div className='pre-wrap'>\n\t\t\t\t\t\t{expandToAll(input).join('\\n')}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t</>\n\t)\n}\n","import { JsonSerializable } from '../types'\n\nexport function initQps<T extends Record<string, JsonSerializable>>() {\n\ttype Key = string & keyof T\n\n\treturn new Proxy({} as Partial<T>, {\n\t\tget(_, k: Key) {\n\t\t\tconst url = new URL(window.location.href)\n\n\t\t\tconst raw = url.searchParams.get(k)\n\n\t\t\ttry {\n\t\t\t\treturn raw == null ? undefined : JSON.parse(raw)\n\t\t\t} catch {\n\t\t\t\t// legacy for unescaped strings\n\t\t\t\treturn raw\n\t\t\t}\n\t\t},\n\t\tset(_, k: Key, v) {\n\t\t\tconst url = new URL(window.location.href)\n\n\t\t\turl.searchParams.set(k, JSON.stringify(v))\n\n\t\t\twindow.history.replaceState({}, document.title, url.href)\n\n\t\t\treturn true\n\t\t},\n\t\tdeleteProperty(_, k: Key) {\n\t\t\tconst url = new URL(window.location.href)\n\n\t\t\turl.searchParams.delete(k)\n\n\t\t\twindow.history.replaceState({}, document.title, url.href)\n\n\t\t\treturn true\n\t\t},\n\t})\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n)\n"],"sourceRoot":""}